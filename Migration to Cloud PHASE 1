<**PHASE 1**>
-	Access AWS console and go to IAM service
-	Under Access management, Click in "Users", then "Add users". Insert the User name terraform-en-1 and click in Next to create a programmatic user.
-	On Set permissions, Permissions options, click in "Attach policies directly" button.
-	Type AmazonS3FullAccess in Search.
-	Select AmazonS3FullAccess
-	Click in Next
-	Review all details, then click Create user.
-	**[NEW] AWS has recently changed the way to download the key.**
-	Follow the new steps:
-	Click on the user you have created.
-	After this, click on Security credentials tab.
-	Scroll down and go to Access keys section.
-	Click on Create access key
-	Select Command Line Interface (CLI) and I understand the above recommendation and want to proceed to create an access key checkbox.
-	Click Next.
-	Click on Create access key
-	Click on Download .csv file
-	After the download is finished, click on Done
	
**[TIP] Access key best practices**
-	Never store your access key in plain text, in a code repository, or in code.
-	Disable or delete access key when no longer needed.
-	Enable least-privilege permissions.
-	Rotate access keys regularly.
-	After downloading, click Done.
-	Now, rename .csv file downloaded to accessKeys.csv                                                                                                                                                  

![image2](https://github.com/sva12000/SVera/assets/43139150/6034c444-08ca-4833-b342-d988e50edad3)
**Google Cloud Platform (GCP)**
-	CLICK link below to download the mission1.zip hands-on files.
-	(https://tcb-public-events.s3.amazonaws.com/icp/mission1.zip)
-	Access GCP Console and open Cloud Shell
-	Upload **accessKeys.csv** and **mission1.zip** hands-on file to GCP Cloud Shell
-	Check if upload has been successfully completed using the command	
  ```
ls -la
  ```
-	**Hands-on files preparation**

![image3](https://github.com/sva12000/SVera/assets/43139150/48834ee1-23f4-4f18-bbe5-bee69f6568fc)

![image4](https://github.com/sva12000/SVera/assets/43139150/6e6d96da-3754-432a-b7bd-7a5d8cc53f07)

![image5](https://github.com/sva12000/SVera/assets/43139150/b863052f-1f11-47c9-a375-6e422fa500f4)

![image6](https://github.com/sva12000/SVera/assets/43139150/d5a8cfd6-2ffe-4ddc-9061-1ac97f0d8287)

•  Run the following commands to prepare AWS and GCP environment. Authorize when asked.
```
./aws_set_credentials.sh accessKeys.csv
```

![image7](https://github.com/sva12000/SVera/assets/43139150/caab2b30-21a3-4299-9ea8-d25004920039)

```
gcloud config set project <project_id>
```

![imaage8](https://github.com/sva12000/SVera/assets/43139150/e3e162fe-7922-4e40-a2e5-4edaf191c945)

**• Execute the following command**
```
./gcp_set_project.sh
```


![image9](https://github.com/sva12000/SVera/assets/43139150/4d40baa8-3626-4a1d-869e-eb73665ab26a)

![image10](https://github.com/sva12000/SVera/assets/43139150/624a0433-1861-416d-a793-d5e297db0464)

•Enable the Container Registry API, Kubernetes Engine API and the Cloud SQL API

**gcloud services enable containerregistry.googleapis.com** 

**gcloud services enable container.googleapis.com** 

**gcloud services enable sqladmin.googleapis.com**

**IMPORTANT (DO NOT SKIP):**
-	Before executing the Terraform commands:
-	Open the Google Editor and update the file tcb_aws_storage.tf replacing the bucket name with an unique name (AWS requires unique bucket names).
-	**STEPS:**
-	Open the tcb_aws_storage.tf using Google Editor
-	On line 4 of the file tcb_aws_storage.tf:
-	Replace xxxx with your name initials, using 5 letters plus 5 random numbers: Example: luxxy-covid-testing-system-pdf-en-sergio40404

![image11](https://github.com/sva12000/SVera/assets/43139150/8c24fc7e-ff90-493a-8cf5-412936a2ab73)

•Issue these commands to complete the provision infrastructure steps
```
- cd ~/mission1_en/mission1/en/terraform/
- terraform init
- terraform plan
- terraform apply
```
- Type **Yes**

- Note: It might take 15 to 25 minutes to create the Cloud SQL database, make sure to check the CloudShell to click Reconnect when the session expires (the session expires after 5 minutes of inactivity by default)
-  The warning message at the end of terraform apply command execution is not a problem, continue with the steps:

![image12](https://github.com/sva12000/SVera/assets/43139150/0a14ede0-797b-4162-95b5-bbe46dfe5b2d)

- Issue the **"ls"** command to see that the files in this folder

![image13](https://github.com/sva12000/SVera/assets/43139150/53b405c0-177a-4a64-b2a5-9a24b5b09e94)

**-terraform init**

![image14](https://github.com/sva12000/SVera/assets/43139150/e93983e4-1ff9-40f2-af4d-843ab72bbb01)

**-terraform Plan**

![image15](https://github.com/sva12000/SVera/assets/43139150/e952c2be-8bbe-4403-93a0-983bc26c9770)

**-terraform apply**

![image17](https://github.com/sva12000/SVera/assets/43139150/89737efc-b03b-42eb-a28d-7ae5ee97c3e0)

**- Type "Yes"**

![image18](https://github.com/sva12000/SVera/assets/43139150/36540a27-7953-4f27-bd34-6296b2fa056d)

**SQL Network Configuration**

•	**Once the Cloud SQL instance is provisioned, access the Cloud SQL service**

•	**Click on your Cloud SQL instance.**

•	**On the left side, under Primary Instance, click on Connections.****

•	**Go to Networking tab.**

•	**Under Instance IP assignment, select Private IP to enable**. 

o	**Under Associated networking, select "Default"**

o	**Click Set up Connection**

o	**Click on Enable API, to enable Service Networking API (if asked).**

o	**Select Use an automatically allocated IP range in your network.**

o	**Click Continue**

o	**Click Create Connection and wait a minutes until conclude. You will see the message: “Private services access connection for network default  has been successfully created.”**

•	**Under Authorized Networks, click "Add Network".**

•	**Under New Network, enter the following information:**

o	**Name: Public Access (For testing purposes only)**

o	**Network: 0.0.0.0/0**

o	**Click Done.**

o	**Click Save and wait to finish the update.** **This update may take from 10 to 20 minutes to finish**

**PS: For production environments, it is recommended to use only the Private Network for database access. ⚠️ Never grant public network access (0.0.0.0/0) to production databases.**

**You have accomplished PHASE 1 of this Project, below are the names of the Toolkit of the Multi-Cloud & DevOsp and a functional description of the TERRAFORM AND ANSIBLE Scripts used IN THE DEPLOYMENT 
OF THE ABOVE INFRASTRUCTURE:**

**Infrastructure Provisioning:**

AWS CloudShell displays an already created Terraform file named “ MAIN.TF” that would provision a VM Virtual Machine. The highlighted block will create the virtual machine.

![ImageTerraform script](https://github.com/sva12000/SVera/assets/43139150/ebfe6341-d531-4971-8f88-581d086d75bd)

 
The Terraform apply,  command when invocated it, will provision the infrastructure in a fully automated way.
 
![Terraformscript2](https://github.com/sva12000/SVera/assets/43139150/c0f23a4b-c434-4361-8c75-f2b493fcd97f)


Terraform apply is reading the main.tf file to deploy the instances or resources indicated on this file.
![TerraformScript3](https://github.com/sva12000/SVera/assets/43139150/e5294ad3-d2f9-4d21-92fa-62cb9e691f7c)
 

After a few seconds, the instance will be created on AWS  EC2 site 
![TerraformScript4](https://github.com/sva12000/SVera/assets/43139150/a34c1bb2-627c-42ad-b463-e987a3d010d3)


**Terraform configuration file to provision a VM on AWS.**
```
Live1-canivete > main.fg > provider “aws”
1	terraform {
2	  required_providers {
3	    Aws = {
4	         Source  =  “hashicorp/aws”
5	         Version =  “~> 4.16”
6	    }
7	  }
8	 
9	  Required_version = “>= 1.2.0”
10	}
11	
12	Provider “aws” {
13	    region  =  “us-west-2”
14	}
15	
16	resource “aws_instance” “app_server” {
17	   ami	          = “ami-838c94e3”
18	   Instance_type = “t2.micro”
19	
20	  Tags = {
21	      Name = “tcb-app-server1”
22	  }
23	}
```
		
**ENVIRONMENT CONFIGURATION USING**

**ANSIBLE**

It is a configuration management tool that allows you to automate all those environment configuration steps without having to connect to all those servers to do it manually.

Before you were using a note pad now you create a PlayBook.

Playbook is a configuration file with a set of tasks that you can put together for ANSIBLE can execute in parallel across multiple servers.

**Example of ANSIBLE PLAYBOOK.-**

This playbook file was created to install APACHE on a search of WEB SERVERS. 
THIS PLAYBOOK will connect to each one of the WEB Servers whether one server or a thousand servers.
It will do all the tasks at the same time in parallel.

Go there open a new connectivity to those hosts and run all the tasks and then everything that starts on line four is a task.

* so the first task that ends, 
* what’s gonna do is install and configure the latest APACHE VERSION
* And then instead of you connecting to the VM and running the uninstall for example to install a new software in a VM.
*It would now use **ANSIBLE** task to fulfill that request.
```
* Changing Directory permission 
* Copy sample index file
* Iptables:  Allow traffic on port 80” adding  IPTABLES RULES
```
All of those tasks with **ANSIBLE** in just a single shot with just one command
-You write the ANSIBLE PLAYBOOK and then you specify in which servers you want to run those set of tasks

 ![ANSIBLEscreenshot1](https://github.com/sva12000/SVera/assets/43139150/218bbb67-9a16-462c-82d2-dbca0cf58a67)






**+++++++++++++++END OF PHASE 1+++++++++++++++**
